#!/usr/bin/env bash
# configures a brand new Ubuntu machine to the requirements;
# configure web-02 to be identical to web-01
# add a custom Nginx response header to track which web
# server is answering our HTTP requests, to understand and
# track the way a load balancer works.
# Configure Nginx so that its HTTP response contains a
# custom header (on web-01 and web-02
# The name of the custom HTTP header must be X-Served-By
# The value of the custom HTTP header must be the hostname
# of the server Nginx is running on

echo -e "Configuring a bran new Ubuntu Machine....\n"

function install() {
        command -v "$1" &> /dev/null

        # disabling shellcheck=SC2181
        if [ $? -ne 0 ]; then
                echo -e "Installing: $1\n"
                sudo apt-get update -y -qq && sudo apt-get install -y "$1" -qq
                echo -e "\n"
        else
                echo -e "${1} is already installed in server.\n"
        fi
}

install nginx # installing nginx

# allow nginx on firewall
sudo ufw allow 'Nginx HTTP'

# assigned ownership of website files to user for easy editing
if [ -d "/var/www" ]; then
        sudo chown -R "$USER":"$USER" /var/www
        sudo chmod -R 755 /var/www
else
        sudo mkdir -p /var/www
        sudo chown -R "$USER":"$USER" /var/www
        sudo chmod -R 755 /var/www
fi

# create directories if not present
for dir in /var/www/{html,error}; do
        if ! [ -d "$dir" ]; then
                mkdir -p "$dir"
        fi
done

# creating new index
echo "Hello World!" > /var/www/html/index.html

# create new error page
echo "Ceci n'est pas une page" > /var/www/html/error_404.html

# default server config file backing up
sudo cp /etc/nginx/sites-enabled/default nginx-sites-enabled_default.backup

server_config=\
        "##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;
      	# rewrite ^/redirect_me https://www.youtube.com/watch?v=QH2-TGUlwu4 permanent;
      	# error_page 404 /error_404.html;
      	# rewrite ^/redirect_me https://www.youtube.com/watch?v=QH2-TGUlwu4 permanent;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;
	add_header X-Served-By \$hostname;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}

	if (\$request_filename ~ redirect_me){
		rewrite ^ https://th3-grOOt.tk/ permanent;
	}
	error_page 404 /error_404.html;
	location = /error_404.html {
		internal;
	}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}"

# shellcheck disable=SC2154
echo "$server_config" | dd status=none of=/etc/nginx/sites-enabled/default

if [ "$(pgrep -c nginx)" -le 0 ]; then
	sudo service nginx start
else
	sudo service nginx restart
fi
